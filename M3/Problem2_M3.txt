Give the order of growth (as a function of N ) of the running times of each of the following code fragments:

Code-1:     int count = 0;

            for(int i = 0; i < N; i++){

                count++;

            }

Since the variable i is incremented by a constant value N, the time complexity is O(1).



Code-2:           int sum = 0;

            if(sum == 0){

                sum++;
}

In this code, the condition is satisfies only once, and the statement is also incremented once, so the time complexity would be O(1).



Code-3:	for(int i = N; i > 0; i < N/2)
	{
	int sum = 0;
	}
In this code, the variable is divided by a constant amount. So, the time complexity would be O(Log(N)).



Code-4:    for(int i = 0; i < N; i++){
                for(int j = 0; j < N; j++){
                    System.out.println(“Hello”);
                }
            }
In this code, the inner loop is executed N times for a single iteration of the outer loop which is also iterated N times. So, the running time is N*N and the time complexity is O(N^2).

Code-5:     for(int i = 0; i < N; i++){

                for(int j = 0; j < N; j = j * 2){

                    System.out.println(“Hello”);

                }

            }

In this code, the inner is multiplied by a constant value, and is iterated N times, so the running time is Log(N). The outer loop is iterated by a constant value N, so the time complexity of the whole is O(N*Log(N)).

 Code-6:     public int fibonacci(int number) {

 if (number <= 1) {

                       return number;

                 } else {

                           return fibonacci(number - 1) + fibonacci(number - 2);

                 }

}

In this code, either of the statements will execute but not both, so O(N).

